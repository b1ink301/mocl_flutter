// Mocks generated by Mockito 5.4.5 from annotations
// in mocl_flutter/test/features/mocl/data/repositories/mocl_main_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mocl_flutter/features/mocl/data/datasources/main_data_source.dart'
    as _i4;
import 'package:mocl_flutter/features/mocl/data/datasources/parser/base_parser.dart'
    as _i3;
import 'package:mocl_flutter/features/mocl/data/datasources/parser/parser_factory.dart'
    as _i9;
import 'package:mocl_flutter/features/mocl/data/models/main_item_model.dart'
    as _i8;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_main_item.dart'
    as _i6;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_site_type.dart'
    as _i7;
import 'package:mocl_flutter/features/mocl/domain/repositories/settings_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsRepository_0 extends _i1.SmartFake
    implements _i2.SettingsRepository {
  _FakeSettingsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseParser_1 extends _i1.SmartFake implements _i3.BaseParser {
  _FakeBaseParser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MainDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainDataSource extends _i1.Mock implements _i4.MainDataSource {
  MockMainDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.MainItem>> get(_i7.SiteType? siteType) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [siteType],
        ),
        returnValue: _i5.Future<List<_i6.MainItem>>.value(<_i6.MainItem>[]),
      ) as _i5.Future<List<_i6.MainItem>>);

  @override
  _i5.Future<List<int>> set(
    _i7.SiteType? siteType,
    List<_i6.MainItem>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            siteType,
            list,
          ],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);

  @override
  _i5.Future<List<_i8.MainItemModel>> getAllFromJson(_i7.SiteType? siteType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFromJson,
          [siteType],
        ),
        returnValue:
            _i5.Future<List<_i8.MainItemModel>>.value(<_i8.MainItemModel>[]),
      ) as _i5.Future<List<_i8.MainItemModel>>);

  @override
  _i5.Future<void> deleteAll(_i7.SiteType? siteType) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [siteType],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> hasItem(
    _i7.SiteType? siteType,
    _i6.MainItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasItem,
          [
            siteType,
            item,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i2.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.SiteType getSiteType() => (super.noSuchMethod(
        Invocation.method(
          #getSiteType,
          [],
        ),
        returnValue: _i7.SiteType.clien,
      ) as _i7.SiteType);

  @override
  void setSiteType(_i7.SiteType? siteType) => super.noSuchMethod(
        Invocation.method(
          #setSiteType,
          [siteType],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ParserFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockParserFactory extends _i1.Mock implements _i9.ParserFactory {
  MockParserFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i7.SiteType, _i3.BaseParser> get parsers => (super.noSuchMethod(
        Invocation.getter(#parsers),
        returnValue: <_i7.SiteType, _i3.BaseParser>{},
      ) as Map<_i7.SiteType, _i3.BaseParser>);

  @override
  _i2.SettingsRepository get settingsRepository => (super.noSuchMethod(
        Invocation.getter(#settingsRepository),
        returnValue: _FakeSettingsRepository_0(
          this,
          Invocation.getter(#settingsRepository),
        ),
      ) as _i2.SettingsRepository);

  @override
  _i3.BaseParser createParser() => (super.noSuchMethod(
        Invocation.method(
          #createParser,
          [],
        ),
        returnValue: _FakeBaseParser_1(
          this,
          Invocation.method(
            #createParser,
            [],
          ),
        ),
      ) as _i3.BaseParser);
}
