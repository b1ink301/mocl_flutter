// Mocks generated by Mockito 5.4.4 from annotations
// in mocl_flutter/test/features/mocl/data/repositories/mocl_main_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:mocl_flutter/features/mocl/data/datasources/main_data_source.dart'
    as _i6;
import 'package:mocl_flutter/features/mocl/data/datasources/remote/base/base_api.dart'
    as _i5;
import 'package:mocl_flutter/features/mocl/data/datasources/remote/base/base_parser.dart'
    as _i4;
import 'package:mocl_flutter/features/mocl/data/datasources/remote/parser/parser_factory.dart'
    as _i13;
import 'package:mocl_flutter/features/mocl/data/models/main_item_model.dart'
    as _i12;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_main_item.dart'
    as _i9;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_result.dart'
    as _i8;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_site_type.dart'
    as _i10;
import 'package:mocl_flutter/features/mocl/domain/repositories/settings_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsRepository_1 extends _i1.SmartFake
    implements _i3.SettingsRepository {
  _FakeSettingsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseParser_2 extends _i1.SmartFake implements _i4.BaseParser {
  _FakeBaseParser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseApi_3 extends _i1.SmartFake implements _i5.BaseApi {
  _FakeBaseApi_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MainDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainDataSource extends _i1.Mock implements _i6.MainDataSource {
  MockMainDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i8.Result<List<_i9.MainItem>>> get(_i10.SiteType? siteType) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [siteType],
        ),
        returnValue: _i7.Future<_i8.Result<List<_i9.MainItem>>>.value(
            _i11.dummyValue<_i8.Result<List<_i9.MainItem>>>(
          this,
          Invocation.method(
            #get,
            [siteType],
          ),
        )),
      ) as _i7.Future<_i8.Result<List<_i9.MainItem>>>);

  @override
  _i7.Future<List<int>> set(
    _i10.SiteType? siteType,
    List<_i9.MainItem>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            siteType,
            list,
          ],
        ),
        returnValue: _i7.Future<List<int>>.value(<int>[]),
      ) as _i7.Future<List<int>>);

  @override
  _i7.Future<List<_i12.MainItemModel>> getAllFromJson(
          _i10.SiteType? siteType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFromJson,
          [siteType],
        ),
        returnValue:
            _i7.Future<List<_i12.MainItemModel>>.value(<_i12.MainItemModel>[]),
      ) as _i7.Future<List<_i12.MainItemModel>>);

  @override
  _i7.Future<void> deleteAll(_i10.SiteType? siteType) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [siteType],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> hasItem(
    _i10.SiteType? siteType,
    _i9.MainItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasItem,
          [
            siteType,
            item,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i3.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.SiteType getSiteType() => (super.noSuchMethod(
        Invocation.method(
          #getSiteType,
          [],
        ),
        returnValue: _i10.SiteType.clien,
      ) as _i10.SiteType);

  @override
  void setSiteType(_i10.SiteType? siteType) => super.noSuchMethod(
        Invocation.method(
          #setSiteType,
          [siteType],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ParserFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockParserFactory extends _i1.Mock implements _i13.ParserFactory {
  MockParserFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  Map<_i10.SiteType, (_i4.BaseParser, _i5.BaseApi)> get parsers =>
      (super.noSuchMethod(
        Invocation.getter(#parsers),
        returnValue: <_i10.SiteType, (_i4.BaseParser, _i5.BaseApi)>{},
      ) as Map<_i10.SiteType, (_i4.BaseParser, _i5.BaseApi)>);

  @override
  _i3.SettingsRepository get settingsRepository => (super.noSuchMethod(
        Invocation.getter(#settingsRepository),
        returnValue: _FakeSettingsRepository_1(
          this,
          Invocation.getter(#settingsRepository),
        ),
      ) as _i3.SettingsRepository);

  @override
  (_i4.BaseParser, _i5.BaseApi) buildParser() => (super.noSuchMethod(
        Invocation.method(
          #buildParser,
          [],
        ),
        returnValue: (
          _FakeBaseParser_2(
            this,
            Invocation.method(
              #buildParser,
              [],
            ),
          ),
          _FakeBaseApi_3(
            this,
            Invocation.method(
              #buildParser,
              [],
            ),
          )
        ),
      ) as (_i4.BaseParser, _i5.BaseApi));
}
