// Mocks generated by Mockito 5.4.5 from annotations
// in mocl_flutter/test/features/mocl/data/datasoures/mocl_list_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dio/dio.dart' as _i12;
import 'package:fpdart/fpdart.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:mocl_flutter/core/error/failures.dart' as _i11;
import 'package:mocl_flutter/features/mocl/data/datasources/list_data_source.dart'
    as _i2;
import 'package:mocl_flutter/features/mocl/data/datasources/parser/base_parser.dart'
    as _i7;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_details.dart'
    as _i13;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_list_item.dart'
    as _i5;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_main_item.dart'
    as _i6;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_result.dart'
    as _i4;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_site_type.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ListDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockListDataSource extends _i1.Mock implements _i2.ListDataSource {
  MockListDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.ListItem>>> getList(
    _i6.MainItem? item,
    int? page,
    int? lastId,
    _i7.BaseParser? parser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            item,
            page,
            lastId,
            parser,
          ],
        ),
        returnValue: _i3.Future<_i4.Result<List<_i5.ListItem>>>.value(
            _i8.dummyValue<_i4.Result<List<_i5.ListItem>>>(
          this,
          Invocation.method(
            #getList,
            [
              item,
              page,
              lastId,
              parser,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.ListItem>>>);

  @override
  _i3.Future<int> setReadFlag(
    _i9.SiteType? siteType,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReadFlag,
          [
            siteType,
            id,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> isReadFlag(
    _i9.SiteType? siteType,
    int? boardId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isReadFlag,
          [
            siteType,
            boardId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<Map<int, bool>> isReadFlags(
    _i9.SiteType? siteType,
    List<int>? boardIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isReadFlags,
          [
            siteType,
            boardIds,
          ],
        ),
        returnValue: _i3.Future<Map<int, bool>>.value(<int, bool>{}),
      ) as _i3.Future<Map<int, bool>>);
}

/// A class which mocks [BaseParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseParser extends _i1.Mock implements _i7.BaseParser {
  MockBaseParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.SiteType get siteType => (super.noSuchMethod(
        Invocation.getter(#siteType),
        returnValue: _i9.SiteType.clien,
      ) as _i9.SiteType);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i10.Either<_i11.Failure, List<_i6.MainItem>> main(
          _i12.Response<dynamic>? response) =>
      (super.noSuchMethod(
        Invocation.method(
          #main,
          [response],
        ),
        returnValue:
            _i8.dummyValue<_i10.Either<_i11.Failure, List<_i6.MainItem>>>(
          this,
          Invocation.method(
            #main,
            [response],
          ),
        ),
      ) as _i10.Either<_i11.Failure, List<_i6.MainItem>>);

  @override
  _i3.Future<_i4.Result<List<_i5.ListItem>>> list(
    _i12.Response<dynamic>? response,
    int? lastId,
    String? boardTitle,
    _i3.Future<Map<int, bool>> Function(
      _i9.SiteType,
      List<int>,
    )? isReads,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [
            response,
            lastId,
            boardTitle,
            isReads,
          ],
        ),
        returnValue: _i3.Future<_i4.Result<List<_i5.ListItem>>>.value(
            _i8.dummyValue<_i4.Result<List<_i5.ListItem>>>(
          this,
          Invocation.method(
            #list,
            [
              response,
              lastId,
              boardTitle,
              isReads,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.ListItem>>>);

  @override
  _i3.Future<_i4.Result<_i13.Details>> detail(
          _i12.Response<dynamic>? response) =>
      (super.noSuchMethod(
        Invocation.method(
          #detail,
          [response],
        ),
        returnValue: _i3.Future<_i4.Result<_i13.Details>>.value(
            _i8.dummyValue<_i4.Result<_i13.Details>>(
          this,
          Invocation.method(
            #detail,
            [response],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i13.Details>>);

  @override
  _i3.Future<_i4.Result<dynamic>> comment(_i12.Response<dynamic>? response) =>
      (super.noSuchMethod(
        Invocation.method(
          #comment,
          [response],
        ),
        returnValue: _i3.Future<_i4.Result<dynamic>>.value(
            _i8.dummyValue<_i4.Result<dynamic>>(
          this,
          Invocation.method(
            #comment,
            [response],
          ),
        )),
      ) as _i3.Future<_i4.Result<dynamic>>);
}
