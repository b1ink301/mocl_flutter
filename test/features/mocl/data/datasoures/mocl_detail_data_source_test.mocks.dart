// Mocks generated by Mockito 5.4.5 from annotations
// in mocl_flutter/test/features/mocl/data/datasoures/mocl_detail_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cookie_jar/cookie_jar.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:mocl_flutter/core/error/failures.dart' as _i7;
import 'package:mocl_flutter/features/mocl/data/datasources/api_client.dart'
    as _i4;
import 'package:mocl_flutter/features/mocl/data/datasources/parser/base_parser.dart'
    as _i10;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_details.dart'
    as _i13;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_list_item.dart'
    as _i8;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_main_item.dart'
    as _i9;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_site_type.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCookieJar_1 extends _i1.SmartFake implements _i3.CookieJar {
  _FakeCookieJar_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_2<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
          )
          as _i2.Dio);

  @override
  _i3.CookieJar get cookieJar =>
      (super.noSuchMethod(
            Invocation.getter(#cookieJar),
            returnValue: _FakeCookieJar_1(this, Invocation.getter(#cookieJar)),
          )
          as _i3.CookieJar);

  @override
  _i5.Future<_i2.Response<dynamic>> getUri(
    Uri? uri, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUri, [uri], {#headers: headers}),
            returnValue: _i5.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_2<dynamic>(
                this,
                Invocation.method(#getUri, [uri], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i2.Response<dynamic>> get(
    String? url, {
    Map<String, String>? headers,
    _i2.ResponseType? responseType,
    String? contentType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [url],
              {
                #headers: headers,
                #responseType: responseType,
                #contentType: contentType,
              },
            ),
            returnValue: _i5.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_2<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [url],
                  {
                    #headers: headers,
                    #responseType: responseType,
                    #contentType: contentType,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i8.ListItem>>> getList(
    _i9.MainItem? item,
    int? page,
    int? lastId,
    _i10.BaseParser? parser,
    _i5.Future<List<int>> Function(_i11.SiteType, List<int>)? isReads,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getList, [item, page, lastId, parser, isReads]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, List<_i8.ListItem>>>.value(
                  _i12.dummyValue<_i6.Either<_i7.Failure, List<_i8.ListItem>>>(
                    this,
                    Invocation.method(#getList, [
                      item,
                      page,
                      lastId,
                      parser,
                      isReads,
                    ]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, List<_i8.ListItem>>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i13.Details>> getDetail(
    _i8.ListItem? item,
    _i10.BaseParser? parser,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDetail, [item, parser]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, _i13.Details>>.value(
                  _i12.dummyValue<_i6.Either<_i7.Failure, _i13.Details>>(
                    this,
                    Invocation.method(#getDetail, [item, parser]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, _i13.Details>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i9.MainItem>>> getMain(
    _i10.BaseParser? parser,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMain, [parser]),
            returnValue:
                _i5.Future<_i6.Either<_i7.Failure, List<_i9.MainItem>>>.value(
                  _i12.dummyValue<_i6.Either<_i7.Failure, List<_i9.MainItem>>>(
                    this,
                    Invocation.method(#getMain, [parser]),
                  ),
                ),
          )
          as _i5.Future<_i6.Either<_i7.Failure, List<_i9.MainItem>>>);
}
