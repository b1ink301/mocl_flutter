// Mocks generated by Mockito 5.4.5 from annotations
// in mocl_flutter/test/features/mocl/domain/usecases/get_main_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_main_item.dart'
    as _i5;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_result.dart'
    as _i4;
import 'package:mocl_flutter/features/mocl/domain/entities/mocl_site_type.dart'
    as _i6;
import 'package:mocl_flutter/features/mocl/domain/repositories/main_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MainRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainRepository extends _i1.Mock implements _i2.MainRepository {
  MockMainRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Result<List<_i5.MainItem>>> getMainListStream(
          {required _i6.SiteType? siteType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMainListStream,
          [],
          {#siteType: siteType},
        ),
        returnValue: _i3.Stream<_i4.Result<List<_i5.MainItem>>>.empty(),
      ) as _i3.Stream<_i4.Result<List<_i5.MainItem>>>);

  @override
  _i3.Future<_i4.Result<List<_i5.MainItem>>> getMainList(
          {required _i6.SiteType? siteType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMainList,
          [],
          {#siteType: siteType},
        ),
        returnValue: _i3.Future<_i4.Result<List<_i5.MainItem>>>.value(
            _i7.dummyValue<_i4.Result<List<_i5.MainItem>>>(
          this,
          Invocation.method(
            #getMainList,
            [],
            {#siteType: siteType},
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.MainItem>>>);

  @override
  _i3.Future<_i4.Result<List<_i5.MainItem>>> getMainListFromJson(
          {required _i6.SiteType? siteType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMainListFromJson,
          [],
          {#siteType: siteType},
        ),
        returnValue: _i3.Future<_i4.Result<List<_i5.MainItem>>>.value(
            _i7.dummyValue<_i4.Result<List<_i5.MainItem>>>(
          this,
          Invocation.method(
            #getMainListFromJson,
            [],
            {#siteType: siteType},
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.MainItem>>>);

  @override
  _i3.Future<_i4.Result<List<int>>> setMainList({
    required _i6.SiteType? siteType,
    required List<_i5.MainItem>? list,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMainList,
          [],
          {
            #siteType: siteType,
            #list: list,
          },
        ),
        returnValue: _i3.Future<_i4.Result<List<int>>>.value(
            _i7.dummyValue<_i4.Result<List<int>>>(
          this,
          Invocation.method(
            #setMainList,
            [],
            {
              #siteType: siteType,
              #list: list,
            },
          ),
        )),
      ) as _i3.Future<_i4.Result<List<int>>>);
}
