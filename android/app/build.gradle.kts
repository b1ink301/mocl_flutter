import java.util.Properties
import java.io.FileNotFoundException

plugins {
    id("com.android.application")
    // START: FlutterFire Configuration
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    // END: FlutterFire Configuration
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += arrayOf("env")

    productFlavors {
        create("dev") {
            dimension = "env"
            applicationId = "kr.b1ink.mocl.dev"
            versionNameSuffix = "_dev"
            resValue("string", "app_name", "Mocl_DEV")
        }
        create("prd") {
            dimension = "env"
            applicationId = "kr.b1ink.mocl"
            resValue("string", "app_name", "Mocl")
        }
    }
    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

    namespace = "net.b1ink.mocl_flutter"
    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    defaultConfig {
        applicationId = "kr.b1ink.mocl"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        create("key") { // 일반 사이닝 키
            val keyPropertiesFile = project.rootProject.file("key.properties")
            if (!keyPropertiesFile.exists()) {
                throw FileNotFoundException("key.properties file not found at ${keyPropertiesFile.absolutePath}")
            }
            val properties = Properties().apply {
                load(keyPropertiesFile.reader())
            }
            // 필요한 속성이 모두 존재하는지 검증
            storeFile = file(properties.getProperty("storeFile") ?: throw IllegalArgumentException("Missing 'storeFile' in key.properties"))
            keyAlias = properties.getProperty("keyAlias") ?: throw IllegalArgumentException("Missing 'keyAlias' in key.properties")
            keyPassword = properties.getProperty("keyPassword") ?: throw IllegalArgumentException("Missing 'keyPassword' in key.properties")
            storePassword = properties.getProperty("storePassword") ?: throw IllegalArgumentException("Missing 'storePassword' in key.properties")
        }
    }

    buildTypes {
        getByName("release") {
            signingConfig = signingConfigs.getByName("key")
            isMinifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        getByName("debug") {
            signingConfig = signingConfigs.getByName("key")
            isMinifyEnabled = false
        }
        getByName("profile") {
            signingConfig = signingConfigs.getByName("key")
            isMinifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
}

flutter {
    source = "../.."
}
